#!/bin/bash

#Copyright (c) 2021, salesforce.com, inc.
#All rights reserved.
#SPDX-License-Identifier: BSD-3-Clause
#For full license text, see the LICENSE file in the repo root or https://#opensource.org/licenses/BSD-3-Clause

# Copyright 2017 Johns Hopkins University (Shinji Watanabe)
#  Apache 2.0  (http://www.apache.org/licenses/LICENSE-2.0)

. ./path.sh || exit 1;
. ./cmd.sh || exit 1;

# general configuration
backend=pytorch
stage=0        # start from 0 if you need to start from data preparation
stop_stage=100
ngpu=1         # number of gpus ("0" uses cpu, otherwise use gpu)
ncpu=64
gpuid=
debugmode=1
verbose=0      # verbose option
resume=        # Resume the training from snapshot
seed=0
maxepoch=100

# config files
preprocess_config=conf/specaug_dsl.yaml
train_config=conf/train_realigner.yaml
decode_config=conf/decode.yaml

# decoding parameter
n_average=10
recog_model=model.acc.best # set a model to be used for decoding: 'model.acc.best' or 'model.loss.best'

# realigner setup
mtlalpha=0.3
num_steps=4
beta=0.0
tau=0.0
droprate=0.1

# Masks for decoder training.
num_mask=0
mask_width=10

# Number of decoding steps.
decode_num_steps=-1
ctc_type=builtin

# bpemode (unigram or bpe)
nbpe=47
bpemode=bpe

# exp tag
tag="" # tag for managing experiments.

#input
feats_type=fbank_pitch
idim=83

# The feature directory created by speech-datasets.
dumpdir=/export/home/speech-datasets/wsj/asr1/dump/fbank_pitch

. utils/parse_options.sh || exit 1;

# Set bash to 'debug' mode, it will exit on :
# -e 'error', -u 'undefined variable', -o ... 'error in pipeline', -x 'print commands',
set -e
set -u
set -o pipefail

export CUDA_VISIBLE_DEVICES=${gpuid}

train_set=train_si284
decode_set="test_dev93 test_eval92"

# The training/dev/test fbank_pitch features are generated by the speech-datasets package,
# which alleviates us from generating the json files for inputs.
# This is done by going into the wsj/asr1/ folder of speech-datasets/, and running
# ./run.sh --feats_type fbank_pitch
# The dumpdir/ directory then contains ark features and text files.
# Also, change the path to cmvn.ark in your preprocess_config into the one prepared by speech-datasets.

mkdir -p data/lang_char/
dict=data/lang_char/train_nodup_${bpemode}${nbpe}_units.txt
bpemodel=data/lang_char/train_nodup_${bpemode}${nbpe}
echo "dictionary: ${dict}"

if [ ${stage} -le 2 ] && [ ${stop_stage} -ge 2 ]; then
    ### Task dependent. You have to check non-linguistic symbols used in the corpus.
    echo "stage 2: Dictionary Preparation"
    echo "<unk> 1" > ${dict} # <unk> must be 1, 0 will be used for "blank" in CTC

    echo "make a dictionary"
    cut -f 2- -d" " ${dumpdir}/${train_set}/text > data/lang_char/input.txt

    # Please make sure sentencepiece is installed
    spm_train --input=data/lang_char/input.txt \
            --model_prefix=${bpemodel} \
            --vocab_size=${nbpe} \
            --character_coverage=1.0 \
            --model_type=${bpemode} \
            --model_prefix=${bpemodel} \
            --input_sentence_size=100000000 \
            --bos_id=-1 \
            --eos_id=-1 \
            --unk_id=0 \
            --user_defined_symbols="<noise>"

    spm_encode --model=${bpemodel}.model --output_format=piece < data/lang_char/input.txt | tr ' ' '\n' | sort | uniq | awk '{print $0 " " NR+1}' >> ${dict}
    wc -l ${dict}
fi

if [ -z ${tag} ]; then
    expname=${train_set}_${backend}_$(basename ${train_config%.*})_$(basename ${preprocess_config%.*})
else
    expname=${train_set}_${backend}_${tag}
fi
expdir=exp/${expname}
mkdir -p ${expdir}

expname=${expname}_alpha${mtlalpha}_steps${num_steps}_tau${tau}_mask${num_mask}_width${mask_width}_beta${beta}
expdir=exp/${expname}

odim=$(wc -l ${dict} | awk '{print $1}')
odim=$(echo "${odim}+2" | bc)
if [ ${stage} -le 3 ] && [ ${stop_stage} -ge 3 ]; then
    echo "stage 3: Non-AR Network Training"
    mkdir -p ${expdir}

    python -u -m torch.distributed.launch --nproc_per_node=${ngpu} --master_port=$RANDOM \
        ../../../espnet/bin/realigner_train.py \
        --config ${train_config} \
        --preprocess-conf ${preprocess_config} \
        --ngpu ${ngpu} \
        --backend ${backend} \
        --outdir ${expdir}/results \
        --tensorboard-dir tensorboard/${expname} \
        --debugmode ${debugmode} \
        --dict ${dict} \
        --debugdir ${expdir} \
        --verbose ${verbose} \
        --resume ${resume} \
        --epochs ${maxepoch} \
        --mtlalpha ${mtlalpha} \
        --num-steps ${num_steps} \
        --error-temperature ${tau} \
        --ctc_type ${ctc_type} \
        --seed ${seed} \
        --dropout-rate ${droprate} \
        --decoder-num-mask ${num_mask} --decoder-mask-width ${mask_width} \
        --batch-count seq --beta ${beta} \
        --train-sets wsj/train_si284 \
        --valid-sets wsj/test_dev93 \
        --precomputed-feats-type ${feats_type} \
        --idim ${idim} --odim ${odim} \
        --text-filename text \
        --spmodel ${bpemodel}.model
fi


if [ ${stage} -le 4 ] && [ ${stop_stage} -ge 4 ]; then
    echo "stage 4: Non-AR Decoding"
    nj=${ncpu}
    if [[ $(get_yaml.py ${train_config} model-module) = *transformer* ]]; then
        recog_model=model.last${n_average}.avg.best
        average_checkpoints.py --backend ${backend} \
                               --snapshots ${expdir}/results/snapshot.ep.* \
                               --out ${expdir}/results/${recog_model} \
                               --num ${n_average}
    fi

    pids=() # initialize pids
    for rtask in ${decode_set}; do
    (
        decode_dir=decode_${rtask}_$(basename ${decode_config%.*})_steps${decode_num_steps}

        #### use CPU for decoding
        ngpu=0

        ${decode_cmd} JOB=1:${nj} ${expdir}/${decode_dir}/log/decode.JOB.log \
            asr_recog.py \
            --config ${decode_config} \
            --ngpu ${ngpu} \
            --backend ${backend} \
            --result-label ${expdir}/${decode_dir}/data.JOB.json \
            --model ${expdir}/results/${recog_model} \
            --realigner-num-steps ${decode_num_steps} \
            --num_replicas ${nj} \
            --jobid JOB \
            --result-label ${expdir}/${decode_dir}/data.JOB.json \
            --recog-sets wsj/${rtask} \
            --precomputed-feats-type ${feats_type} \
            --preprocess-conf ${preprocess_config} \
            --text-filename text \
            --spmodel ${bpemodel}.model

        score_sclite.sh --bpe ${nbpe} --bpemodel ${bpemodel}.model --wer true ${expdir}/${decode_dir} ${dict}

    ) &
    pids+=($!) # store background pids
    done
    i=0; for pid in "${pids[@]}"; do wait ${pid} || ((++i)); done
    [ ${i} -gt 0 ] && echo "$0: ${i} background jobs are failed." && false

    echo "Finished"
fi

# ./run_realigner.sh --stop_stage 2
# ./run_realigner.sh --stage 3 --stop_stage 3 --ngpu 8 --gpuid 0,1,2,3,4,5,6,7 --tag realigner
# ./run_realigner.sh --stage 4 --stop_stage 4 --tag realigner